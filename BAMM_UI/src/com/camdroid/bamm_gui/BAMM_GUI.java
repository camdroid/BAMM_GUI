/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.camdroid.bamm_gui;

//import com.camdroid.bamm_gui.Model;
import java.awt.Color;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author cam
 */
public class BAMM_GUI extends javax.swing.JFrame {
    
    
    Model model;
    String FILENAME = "output.txt";
    BufferedWriter writer;
    /**
     * Creates new form BAMM_GUI
     */
    public BAMM_GUI() {
        model = new Model();
        //Avoid complications later
        model.setModelType(ModelType.ESModel);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jp_general = new javax.swing.JPanel();
        l_tree = new javax.swing.JLabel();
        tf_filename = new javax.swing.JTextField();
        b_browse = new javax.swing.JButton();
        cb_clock_seed = new javax.swing.JCheckBox();
        l_seed = new javax.swing.JLabel();
        tf_seed = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        cb_mcmc = new javax.swing.JCheckBox();
        l_iter = new javax.swing.JLabel();
        tf_iterations = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        s_model = new javax.swing.JComboBox();
        cb_init_model = new javax.swing.JCheckBox();
        jSeparator3 = new javax.swing.JSeparator();
        cb_priorOnly = new javax.swing.JCheckBox();
        cb_simulatePriors = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        tf_initNumEvents = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        cb_global_prob = new javax.swing.JCheckBox();
        l_sampling_fraction = new javax.swing.JLabel();
        tf_sampling_fraction = new javax.swing.JTextField();
        l_sample_prob_file = new javax.swing.JLabel();
        tf_sample_prob_file = new javax.swing.JTextField();
        b_sample_file = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        t_starting_values = new javax.swing.JTable();
        jLabel18 = new javax.swing.JLabel();
        tf_segLength = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        tf_minCladeSize = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        t_priors = new javax.swing.JTable();
        tf_evp = new javax.swing.JTextField();
        cb_observed_min_max = new javax.swing.JCheckBox();
        l_min = new javax.swing.JLabel();
        tf_observed_min = new javax.swing.JTextField();
        l_max = new javax.swing.JLabel();
        tf_observed_max = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        t_model_tuning = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        t_tuning = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        t_model_update_rates = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        t_update_rates = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        tf_runInfo = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        tf_mcmc = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        tf_mcmc_freq = new javax.swing.JTextField();
        tf_event_data_freq = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        tf_event_data = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        cb_overwrite = new javax.swing.JCheckBox();
        jLabel17 = new javax.swing.JLabel();
        tf_output = new javax.swing.JTextField();
        b_write = new javax.swing.JButton();
        b_exit = new javax.swing.JButton();
        b_loadConfig = new javax.swing.JButton();
        b_reset_all = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        l_tree.setText("Tree: ");

        tf_filename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_filenameActionPerformed(evt);
            }
        });

        b_browse.setText("Browse...");
        b_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_browseActionPerformed(evt);
            }
        });

        cb_clock_seed.setText("Use system clock as random seed");
        cb_clock_seed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_clock_seedActionPerformed(evt);
            }
        });

        l_seed.setText("Seed: ");

        tf_seed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_seedActionPerformed(evt);
            }
        });

        cb_mcmc.setText("Run MCMC");
        cb_mcmc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_mcmcActionPerformed(evt);
            }
        });

        l_iter.setText("Number of iterations: ");
        l_iter.setEnabled(false);

        tf_iterations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_iterationsActionPerformed(evt);
            }
        });
        tf_iterations.setEnabled(false);

        jLabel4.setText("Model: ");

        s_model.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Extinction/Speciation", "Phenotypic" }));
        s_model.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                s_modelActionPerformed(evt);
            }
        });

        cb_init_model.setText("Initialize Model");

        cb_priorOnly.setText("Sample From Prior Only");
        cb_priorOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_priorOnlyActionPerformed(evt);
            }
        });

        cb_simulatePriors.setText("Simulate Prior Shifts");
        cb_simulatePriors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_simulatePriorsActionPerformed(evt);
            }
        });

        jLabel3.setText("Initial Number of Events:");

        tf_initNumEvents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_initNumEventsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jp_generalLayout = new javax.swing.GroupLayout(jp_general);
        jp_general.setLayout(jp_generalLayout);
        jp_generalLayout.setHorizontalGroup(
            jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_generalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2)
                    .addComponent(jSeparator3)
                    .addGroup(jp_generalLayout.createSequentialGroup()
                        .addGroup(jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jp_generalLayout.createSequentialGroup()
                                    .addComponent(l_tree)
                                    .addGap(18, 18, 18)
                                    .addComponent(tf_filename, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(28, 28, 28)
                                    .addComponent(b_browse))
                                .addGroup(jp_generalLayout.createSequentialGroup()
                                    .addComponent(cb_clock_seed)
                                    .addGap(59, 59, 59)
                                    .addComponent(l_seed)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(tf_seed)))
                            .addComponent(cb_init_model)
                            .addGroup(jp_generalLayout.createSequentialGroup()
                                .addGroup(jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cb_mcmc)
                                    .addGroup(jp_generalLayout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(l_iter)
                                        .addGap(18, 18, 18)
                                        .addComponent(tf_iterations, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(89, 89, 89)
                                .addGroup(jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cb_simulatePriors)
                                    .addComponent(cb_priorOnly)))
                            .addGroup(jp_generalLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(s_model, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(71, 71, 71)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(tf_initNumEvents, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 103, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jp_generalLayout.setVerticalGroup(
            jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_generalLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_tree)
                    .addComponent(tf_filename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_browse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_clock_seed)
                    .addComponent(l_seed)
                    .addComponent(tf_seed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_mcmc)
                    .addComponent(cb_priorOnly))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_iter)
                    .addComponent(tf_iterations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cb_simulatePriors))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(s_model, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(tf_initNumEvents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(cb_init_model)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("General", jp_general);

        cb_global_prob.setText("Use global sampling probability");
        cb_global_prob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_global_probActionPerformed(evt);
            }
        });

        l_sampling_fraction.setText("Sampling Fraction");

        l_sample_prob_file.setText("Sample Probability File: ");

        b_sample_file.setText("Browse...");
        b_sample_file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_sample_fileActionPerformed(evt);
            }
        });

        jLabel6.setText("Starting Parameter Values");

        t_starting_values.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"lambda init", "0"},
                {"lambda shift", "0"},
                {"mu init", "0"},
                {"mu shift", "0"}
            },
            new String [] {
                "Parameter", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(t_starting_values);

        jLabel18.setText("Segment Length:");

        jLabel19.setText("Minimum Clade Size for Shift:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jSeparator4)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(cb_global_prob)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(l_sampling_fraction))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(l_sample_prob_file)
                                .addGap(18, 18, 18)
                                .addComponent(tf_sample_prob_file, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 102, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(b_sample_file, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tf_sampling_fraction))
                        .addGap(70, 70, 70))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addGap(41, 41, 41)
                                .addComponent(tf_minCladeSize, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tf_segLength, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_global_prob)
                    .addComponent(l_sampling_fraction)
                    .addComponent(tf_sampling_fraction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_sample_prob_file)
                    .addComponent(tf_sample_prob_file, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_sample_file))
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(tf_segLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(tf_minCladeSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Model", jPanel2);

        jLabel7.setText("Event Rate Prior:");

        t_priors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"lambda init", "1.0"},
                {"lambda shift", ".05"},
                {"mu init", "1.0"},
                {"mu shift", ".05"},
                {"root lambda init", "0"},
                {"root lambda shift", "0"},
                {"root mu init", "5.0"},
                {"root mu shift", "0"}
            },
            new String [] {
                "Parameters", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(t_priors);

        tf_evp.setText("1.0");

        cb_observed_min_max.setText("Use Observed Min/Max as Trait  Priors");
        cb_observed_min_max.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_observed_min_maxActionPerformed(evt);
            }
        });

        l_min.setText("Observed Min");
        l_min.setEnabled(false);

        tf_observed_min.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_observed_minActionPerformed(evt);
            }
        });
        tf_observed_min.setEnabled(false);

        l_max.setText("Observed Max");
        l_max.setEnabled(false);

        tf_observed_max.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7)
                        .addGap(26, 26, 26)
                        .addComponent(tf_evp, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cb_observed_min_max))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(l_max)
                                .addGap(18, 18, 18)
                                .addComponent(tf_observed_max, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(l_min)
                                .addGap(18, 18, 18)
                                .addComponent(tf_observed_min, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(204, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(tf_evp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cb_observed_min_max)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_min)
                    .addComponent(tf_observed_min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_max)
                    .addComponent(tf_observed_max, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Priors", jPanel3);

        jLabel8.setText("General Tuning");

        t_model_tuning.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"lambda init scale", "0"},
                {"lambda shift scale", "0"},
                {"mu init scale", "0"},
                {"mu shift scale", "0"}
            },
            new String [] {
                "Property", "Value"
            }
        ));
        jScrollPane2.setViewportView(t_model_tuning);

        t_tuning.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Event Location Scale", "0"},
                {"Event Rate Scale", "0"},
                {"Local-to-Global Move Ratio", "0"}
            },
            new String [] {
                "Property", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(t_tuning);

        jLabel9.setText("Model-Specific Tuning");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel8))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(50, 50, 50)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel9))))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92))
        );

        jTabbedPane1.addTab("Tuning", jPanel1);

        jLabel10.setText("General Update Rates");

        t_model_update_rates.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Lambda Init Update Rate", "0"},
                {"Lambda Shift Update Rate", "0"},
                {"Mu Init Update Rate", "0"},
                {"Mu Shift Update Rate", "0"}
            },
            new String [] {
                "Property", "Value"
            }
        ));
        jScrollPane5.setViewportView(t_model_update_rates);

        t_update_rates.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Event Number Update Rate", "0"},
                {"Event Location Update Rate", "0"},
                {"Event Rate Update Rate", "0"}
            },
            new String [] {
                "Property", "Value"
            }
        ));
        jScrollPane6.setViewportView(t_update_rates);

        jLabel11.setText("Model-Specific Update Rates");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addContainerGap(463, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(39, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(21, 21, 21)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 165, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(166, 166, 166))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(57, 57, 57)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(345, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 674, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 486, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Update Rates", jPanel4);

        jLabel12.setText("Run Info: ");

        tf_runInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_runInfoActionPerformed(evt);
            }
        });

        jLabel13.setText("MCMC: ");

        jLabel14.setText("Frequency: ");

        tf_mcmc_freq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_mcmc_freqActionPerformed(evt);
            }
        });

        tf_event_data_freq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_event_data_freqActionPerformed(evt);
            }
        });

        jLabel15.setText("Frequency: ");

        tf_event_data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_event_dataActionPerformed(evt);
            }
        });

        jLabel16.setText("Event Data: ");

        cb_overwrite.setText("Overwrite Existing Files");
        cb_overwrite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_overwriteActionPerformed(evt);
            }
        });

        jLabel17.setText("Screen Output Frequency: ");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel16))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(tf_event_data, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(124, 124, 124)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tf_event_data_freq, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(tf_mcmc, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(124, 124, 124)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tf_mcmc_freq))
                            .addComponent(tf_runInfo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(cb_overwrite)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(18, 18, 18)
                        .addComponent(tf_output, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(139, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(tf_runInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(tf_mcmc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(tf_mcmc_freq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(tf_event_data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(tf_event_data_freq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(cb_overwrite)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(tf_output, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(140, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Output", jPanel5);

        b_write.setText("Write to File...");
        b_write.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_writeActionPerformed(evt);
            }
        });

        b_exit.setText("Exit");
        b_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_exitActionPerformed(evt);
            }
        });

        b_loadConfig.setText("Load Existing Config");
        b_loadConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_loadConfigActionPerformed(evt);
            }
        });

        b_reset_all.setText("Reset All Fields");
        b_reset_all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_reset_allActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(b_reset_all)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(b_loadConfig)
                .addGap(36, 36, 36)
                .addComponent(b_write)
                .addGap(36, 36, 36)
                .addComponent(b_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_write)
                    .addComponent(b_exit)
                    .addComponent(b_loadConfig)
                    .addComponent(b_reset_all))
                .addGap(0, 56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void b_browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_browseActionPerformed
//        JFileChooser fc = new JFileChooser();
//        int returnVal = fc.showOpenDialog(this);
//        if(returnVal == JFileChooser.APPROVE_OPTION) {
//            String filename = fc.getSelectedFile().getPath();
//            tf_filename.setText(filename);
//        }
        browse(tf_filename);
    }//GEN-LAST:event_b_browseActionPerformed

    private void browse(JTextField tf) {
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            String filename = fc.getSelectedFile().getPath();
            tf.setText(filename);
        }
    }
    
    private void b_writeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_writeActionPerformed
        
        if(s_model.getSelectedIndex() == 0) {
            model.setModelType(ModelType.ESModel);
        } else if(s_model.getSelectedIndex() == 1) {
            model.setModelType(ModelType.Phenotypic);
        } else {
            //For future reference, if you add model types, set the correct type
            // here.  For now, this line should never be reached.
            JOptionPane.showMessageDialog(this, "Wait, how did you do that?");
        }
        if(tf_filename.getText().toString().isEmpty()) {
            JOptionPane.showMessageDialog(this, "There must be a value for the tree name!");
            jTabbedPane1.setSelectedIndex(0);
            l_tree.setForeground(Color.RED);
            return;
        }
        model.setTreeFile(tf_filename.getText().toString());
        if(!cb_clock_seed.isSelected()) {
            try{
                model.setSeed(Long.parseLong(tf_seed.getText().toString()));
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid expression for the clock seed");
                return;
            }
        }
        if(cb_mcmc.isSelected()) {
            try{
                long numIter = Long.parseLong(tf_iterations.getText().toString());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid expression for the number of iterations");
                return;
            }
        }
//        System.out.println(model.toString());
        printToFile(model);
    }//GEN-LAST:event_b_writeActionPerformed

    private void cb_clock_seedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_clock_seedActionPerformed
        // TODO add your handling code here:
        if(cb_clock_seed.isSelected()) {
//            l_seed.setVisible(false);
//            tf_seed.setVisible(false);
            l_seed.setEnabled(false);
            tf_seed.setEnabled(false);
//            model.setSeed(Calendar.getInstance().getTimeInMillis());
        } else {
//            l_seed.setVisible(true);
//            tf_seed.setVisible(true);
            l_seed.setEnabled(true);
            tf_seed.setEnabled(true);
        }
    }//GEN-LAST:event_cb_clock_seedActionPerformed

    private void b_sample_fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_sample_fileActionPerformed
        browse(tf_sample_prob_file);
    }//GEN-LAST:event_b_sample_fileActionPerformed

    private void cb_global_probActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_global_probActionPerformed
        boolean b = cb_global_prob.isSelected();
        l_sampling_fraction.setEnabled(b);
        tf_sampling_fraction.setEnabled(b);
        l_sample_prob_file.setEnabled(b);
        tf_sample_prob_file.setEnabled(b);
    }//GEN-LAST:event_cb_global_probActionPerformed

    private void cb_overwriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_overwriteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_overwriteActionPerformed

    private void b_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_exitActionPerformed
        int reply = JOptionPane.showConfirmDialog(null, "Are you sure?", "Exit", JOptionPane.YES_NO_OPTION);
        if(reply == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_b_exitActionPerformed

    private void s_modelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_s_modelActionPerformed
        if(s_model.getSelectedIndex() == 0 && model.getModelType() == ModelType.Phenotypic) {
            //Extinction/Speciation Model
            //Starting Parameter Values
            t_starting_values.setValueAt("Lambda Init", 0, 0);
            t_starting_values.setValueAt("Lambda Shift Init", 1, 0);
            ((DefaultTableModel)t_starting_values.getModel()).addRow(new Object[]{"Mu Init","0"});
            ((DefaultTableModel)t_starting_values.getModel()).addRow(new Object[]{"Mu Shift Init","0"});
            
            //Priors
            t_priors.setValueAt("Lambda Init", 0, 0);
            t_priors.setValueAt("Lambda Shift", 1, 0);
            t_priors.setValueAt("Mu Init", 2, 0);
            t_priors.setValueAt("Mu Shift", 3, 0);
            ((DefaultTableModel)t_priors.getModel()).addRow(new Object[]{"Root Lambda Init","0"});
            ((DefaultTableModel)t_priors.getModel()).addRow(new Object[]{"Root Lambda Shift","0"});
            ((DefaultTableModel)t_priors.getModel()).addRow(new Object[]{"Root Mu Init","0"});
            ((DefaultTableModel)t_priors.getModel()).addRow(new Object[]{"Root Mu Shift","0"});
            
            //Extra Prior Settings
            cb_observed_min_max.setEnabled(false);
            l_min.setEnabled(false);
            l_max.setEnabled(false);
            tf_observed_min.setEnabled(false);
            tf_observed_min.setEnabled(false);
            
            //Model-Specific Tuning
            t_model_tuning.setValueAt("Lambda Init Scale", 0, 0);
            ((DefaultTableModel)t_model_tuning.getModel()).addRow(new Object[]{"Lambda Shift Scale","0"});
            ((DefaultTableModel)t_model_tuning.getModel()).addRow(new Object[]{"Mu Init Scale","0"});
            ((DefaultTableModel)t_model_tuning.getModel()).addRow(new Object[]{"Mu Shift Scale","0"});
            
            //Model-Specific Update Rates
            t_model_update_rates.setValueAt("Lambda Init Scale", 0, 0);
            t_model_update_rates.setValueAt("Lambda Shift Scale", 1, 0);
            t_model_update_rates.setValueAt("Mu Init Scale", 2, 0);
            ((DefaultTableModel)t_model_update_rates.getModel()).addRow(new Object[]{"Mu Shift Scale", "0"});
        } else if(s_model.getSelectedIndex() == 1 && model.getModelType() == ModelType.ESModel) {
            //Phenotypic Model
            //Starting Parameter Values
            t_starting_values.setValueAt("Beta Init", 0, 0);
            t_starting_values.setValueAt("Beta Shift Init", 1, 0);
            ((DefaultTableModel)t_starting_values.getModel()).removeRow(3);
            ((DefaultTableModel)t_starting_values.getModel()).removeRow(2);
            
            //Priors
            t_priors.setValueAt("Beta Init Prior", 0, 0);
            t_priors.setValueAt("Beta Init Root Prior", 1, 0);
            t_priors.setValueAt("Beta Shift Prior", 2, 0);
            t_priors.setValueAt("Beta Shift Root Prior", 3, 0);
            ((DefaultTableModel)t_priors.getModel()).removeRow(7);
            ((DefaultTableModel)t_priors.getModel()).removeRow(6);
            ((DefaultTableModel)t_priors.getModel()).removeRow(5);
            ((DefaultTableModel)t_priors.getModel()).removeRow(4);
            
            //Extra Prior Settings
            cb_observed_min_max.setEnabled(true);
            l_min.setEnabled(true);
            l_max.setEnabled(true);
            tf_observed_min.setEnabled(true);
            tf_observed_max.setEnabled(true);
            
            //Model-Specific Tuning
            t_model_tuning.setValueAt("Node State", 0, 0);
            ((DefaultTableModel)t_model_tuning.getModel()).removeRow(3);
            ((DefaultTableModel)t_model_tuning.getModel()).removeRow(2);
            ((DefaultTableModel)t_model_tuning.getModel()).removeRow(1);
            
            //Model-Specific Update Rates
            t_model_update_rates.setValueAt("Update Rate Beta 0", 0, 0);
            t_model_update_rates.setValueAt("Update Rate Beta Shift", 1, 0);
            t_model_update_rates.setValueAt("Update Rate Node State", 2, 0);
            ((DefaultTableModel)t_model_update_rates.getModel()).removeRow(3);
        } else {
            //This will be reached if the user selects the option they're already on, in which case nothing should happen
            System.out.println(s_model.getSelectedIndex());
            System.out.println((model.getModelType() == ModelType.Phenotypic) ? "Phenotypic" : "ESModel");
        }
        
        if(s_model.getSelectedIndex() == 0) {
            model.setModelType(ModelType.ESModel);
        } else if(s_model.getSelectedIndex() == 1) {
            model.setModelType(ModelType.Phenotypic);
        } else {
            //Add on more else-ifs to add more model types
        }
    }//GEN-LAST:event_s_modelActionPerformed

    private void tf_filenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_filenameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_filenameActionPerformed

    private void cb_mcmcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_mcmcActionPerformed
        model.setRunMCMC(cb_mcmc.isSelected());
//        l_iter.setVisible(!cb_mcmc.isSelected());
//        tf_iterations.setVisible(!cb_mcmc.isSelected());
        l_iter.setEnabled(cb_mcmc.isSelected());
        tf_iterations.setEnabled(cb_mcmc.isSelected());
    }//GEN-LAST:event_cb_mcmcActionPerformed

    private void tf_seedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_seedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_seedActionPerformed

    private void tf_runInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_runInfoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_runInfoActionPerformed

    private void tf_iterationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_iterationsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_iterationsActionPerformed

    private String[] parseLine(String line) {
//        ArrayList<String> results = new ArrayList<String>();
        String[] results = line.split(" = ");
        
        return results;
    }
    
    //TODO Make this work
    // Right now, components end up all null
    private void resetAllFields() {
        Component[] components = getContentPane().getComponents();
        for(Component c: components) {
            System.out.println("Resetting "+c.getName());
            if(c instanceof JCheckBox) {
                ((JCheckBox)c).setSelected(false);
            } else if(c instanceof JTextField) {
                ((JTextField)c).setText("");
            }
        }
    }
    private void b_loadConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_loadConfigActionPerformed
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        String filename = "";
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            filename = fc.getSelectedFile().getPath();
//            model.setLoadEventData(true);
//            model.setEventDataInfile(filename);
        }
        if(filename.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please pick a real file", "File Error", JOptionPane.PLAIN_MESSAGE);
            return;
        }
        try {
            resetAllFields();
            BufferedReader in = new BufferedReader(new FileReader(filename));
            String currentLine = "";
            while((currentLine = in.readLine()) != null) {
                if(currentLine.charAt(0) == '#') {
                    System.out.println("Comment - skipping line");
                    continue;
                }
                System.out.println(currentLine);
                String[] results = parseLine(currentLine);
                //Idea - right now, I'll just use a giant switch statement, but I'm guessing that will eventually be too large
                // (or at least, very hard to maintain).  Ideally, I'll create a map from the text result to the corresponding
                // Java UI element, and will then be able to go back and forth between the two.
                //But it's hard to say how (or even if) that will work, considering there are multiple types of UI elements...hmm
                switch(results[0]) {
                    case "modeltype":
                        System.out.println("Reading modeltype...");
                        if(results[1].equals("extinctionspeciation")) {
                            System.out.println("Setting modeltype to E/S");
                            s_model.setSelectedItem("Extinction/Speciation");
                        } else {
                            System.out.println("Setting modeltype to Phenotypic");
                            s_model.setSelectedItem("Phenotypic");
                        }
                        break;
                    case "treefile":
                        System.out.println("Hey, treefile: "+results[1]);
                        tf_filename.setText(results[1]);
                        break;
                    case "seed":
                        System.out.println("Seed is "+results[1]);
                        long seed = Long.parseLong(results[1], 10);
                        if(seed == -1) {
                            cb_clock_seed.setSelected(true);
                            tf_seed.setEnabled(false);
                            l_seed.setEnabled(false);
                        } else {
                            l_seed.setEnabled(true);
                            tf_seed.setEnabled(true);
                            tf_seed.setText(seed+"");
                        }
                        break;
                    case "runMCMC":
//                        System.out.println("runMCMC is "+results[1]);
                        cb_mcmc.setSelected(results[1].equals("1"));
                        break;
                    case "sampleFromPriorOnly":
//                        System.out.println("sampleFromPriorOnly is "+results[1]);
                        cb_priorOnly.setSelected(results[1].equals("1"));
                        break;
                    case "simulatePriorShifts":
//                        System.out.println("simulatePriorShifts is "+results[1]);
                        cb_simulatePriors.setSelected(results[1].equals("1"));
                        break;
                    case "numberGenerations":
                        tf_iterations.setText(results[1]);
                        break;
                    case "initializeModel":
                        cb_init_model.setSelected(results[1].equals("1"));
                        break;
                    case "useGlobalSamplingProbability":
                        cb_global_prob.setSelected(results[1].equals("1"));
                        break;
                    case "globalSamplingProbability":
                        tf_sampling_fraction.setText(results[1]);
                        break;
                    case "sampleProbsFilename":
                        tf_sample_prob_file.setText(results[1]);
                        break;
                    case "lambdaInit0":
                        t_starting_values.setValueAt(results[1], 0, 1);
                        break;
                    case "lambdaShift0":
                        t_starting_values.setValueAt(results[1], 1, 1);
                        break;
                    case "muInit0":
                        t_starting_values.setValueAt(results[1], 2, 1);
                        break;
                    case "muShift0":
                        t_starting_values.setValueAt(results[1], 3, 1);
                        break;
                    case "poissonRatePrior":
                        tf_evp.setText(results[1]);
                        break;
                    case "lambdaInitPrior":
                        t_starting_values.setValueAt(results[1], 0, 1);
                        break;
                    case "lambdaInitRootPrior":
                        t_starting_values.setValueAt(results[1], 4, 1);
                        break;
                    case "lambdaShiftPrior":
                        t_starting_values.setValueAt(results[1], 1, 1);
                        break;
                    case "lambdaShiftRootPrior":
                        t_starting_values.setValueAt(results[1], 5, 1);
                        break;
                    case "muInitPrior":
                        t_starting_values.setValueAt(results[1], 2, 1);
                        break;
                    case "muInitRootPrior":
                        t_starting_values.setValueAt(results[1], 6, 1);
                        break;
                    case "muShiftPrior":
                        t_starting_values.setValueAt(results[1], 3, 1);
                        break;
                    case "muShiftRootPrior":
                        t_starting_values.setValueAt(results[1], 7, 1);
                        break;
                    case "useObservedMinMaxAsPriors":
                        cb_observed_min_max.setSelected(results[1].equals("1"));
                        break;
                    case "traitPriorMin":
                        tf_observed_min.setText(results[1]);
                        break;
                    case "traitPriorMax":
                        tf_observed_max.setText(results[1]);
                        break;
                    case "updateRateEventNumber":
                        t_update_rates.setValueAt(results[1], 0, 1);
                        break;
                    case "updateRateEventRate":
                        t_update_rates.setValueAt(results[1], 2, 1);
                        break;
                    case "updateRateBeta0":
                        //TODO Might want to throw an "if" in here for error checking
                        t_model_update_rates.setValueAt(results[1], 0, 1);
                        break;
                    case "updateRateBetaShift":
                        t_model_update_rates.setValueAt(results[1], 1, 1);
                        break;
                    case "updateRateNodeState":
                        t_model_update_rates.setValueAt(results[1], 2, 1);
                        break;
                    case "runInfoFilename":
                        tf_runInfo.setText(results[1]);
                        break;
                    case "mcmcOutfile":
                        tf_mcmc.setText(results[1]);
                        break;
                    case "mcmcWriteFreq":
                        tf_mcmc_freq.setText(results[1]);
                        break;
                    case "eventDataOUtfile":
                        tf_event_data.setText(results[1]);
                        break;
                    case "eventDataWriteFreq":
                        tf_event_data_freq.setText(results[1]);
                        break;
                    case "overwrite":
                        cb_overwrite.setSelected(results[1].equals("1"));
                        break;
                    case "printFreq":
                        tf_output.setText(results[1]);
                        break;
                    case "updateEventLocationScale":
                        t_tuning.setValueAt(results[1], 0, 1);
                        break;
                    case "updateEventRateScale":
                        t_tuning.setValueAt(results[1], 1, 1);
                        break;
                    case "localGlobalMoveRatio":
                        t_tuning.setValueAt(results[1], 2, 1);
                        break;
                }
            }
        } catch(FileNotFoundException e) {
            e.printStackTrace();
        } catch(IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_b_loadConfigActionPerformed

    private void tf_event_dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_event_dataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_event_dataActionPerformed

    private void tf_mcmc_freqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_mcmc_freqActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_mcmc_freqActionPerformed

    private void tf_event_data_freqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_event_data_freqActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_event_data_freqActionPerformed

    private void cb_observed_min_maxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_observed_min_maxActionPerformed
        boolean set = cb_observed_min_max.isSelected();
        
        l_min.setEnabled(set);
        l_max.setEnabled(set);
        tf_observed_min.setEnabled(set);
        tf_observed_max.setEnabled(set);
        
    }//GEN-LAST:event_cb_observed_min_maxActionPerformed

    private void tf_observed_minActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_observed_minActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_observed_minActionPerformed

    private void cb_priorOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_priorOnlyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_priorOnlyActionPerformed

    private void cb_simulatePriorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_simulatePriorsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_simulatePriorsActionPerformed

    private void tf_initNumEventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_initNumEventsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_initNumEventsActionPerformed

    private void b_reset_allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_reset_allActionPerformed
        resetAllFields();
    }//GEN-LAST:event_b_reset_allActionPerformed
    private void write(String parameter, String value) {
        if(value != "null" && !value.isEmpty()) {
            try{
                writer.write(parameter + " = " + value);
                writer.newLine();
            } catch(IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }
    private void write(String parameter, JTextField valueField) {
        //TODO Fill this in for error-checking
    }
    private void printToFile(Model model) {
        
        try {
            //Open the file
            JFileChooser fc = new JFileChooser();
            int returnVal = fc.showOpenDialog(this);
            String filename="";
            if(returnVal == JFileChooser.APPROVE_OPTION) {
                 filename = fc.getSelectedFile().getPath();
            }
            File outputFile = new File(filename);
            writer = new BufferedWriter(new FileWriter(outputFile));
            
            //Start writing all the options
            // <editor-fold defaultstate="collapsed" desc=" Section 6.2: General Options and Parameters ">
                // <editor-fold defaultstate="collapsed" desc=" Section 6.2.1: General ">
            //Section 6.2.1: General
            writer.write("#This is a comment and will not be read by BAMM.");
            writer.newLine();
            write("modeltype", ((model.getModelType() == ModelType.Phenotypic) ? "trait" : "extinctionspeciation"));
            write("treefile", model.getTreeFilename());
            write("runInfoFilename", tf_runInfo.getText().toString());
            write("sampleFromPriorOnly", (cb_priorOnly.isSelected() ? "1" : "0"));
            write("autotune", "");  //No value for this yet
            
            write("runMCMC", ((model.getRunMCMC() ? "1" : "0")));
            write("simulatePriorShifts", (cb_simulatePriors.isSelected()) ? "1" : "0");     
            write("loadEventData", model.getLoadEventData()+"");
            if(model.getLoadEventData()) {
                write("eventDataInFile", "");
            }
            write("initializeModel", (cb_init_model.isSelected()) ? "1" : "0");
            write("seed", (cb_clock_seed.isSelected() ? "-1" : tf_seed.getText().toString()));
            write("overwrite", (cb_overwrite.isSelected() ? "1" : "0"));

// </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.2.2: Priors ">
            //Section 6.2.2: Priors
            write("poissonRatePrior", tf_evp.getText().toString());

            // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.2.3: MCMC Simulation ">
            if (model.getRunMCMC()) {
                write("numberGenerations", tf_iterations.getText().toString());
                write("mcmcWriteFreq", tf_mcmc_freq.getText().toString());
                write("eventDataWriteFreq", tf_event_data_freq.getText().toString());
                write("printFreq", tf_output.getText().toString());
                write("outName", tf_mcmc.getText().toString());
                write("mcmcOutfile", tf_mcmc.getText().toString());
                write("eventDataOutfile", tf_event_data.getText().toString());
                write("updateEventLocationScale", t_tuning.getValueAt(0, 1)+"");
                write("updateEventRateScale", t_tuning.getValueAt(1, 1)+"");
                write("localGlobalMoveRatio", t_tuning.getValueAt(2, 1)+"");
            }
            // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.2.4: Parameter Update Rates ">
            
            write("updateRateEventNumber", t_update_rates.getValueAt(0, 1)+"");
            write("updateRateEventPosition", t_update_rates.getValueAt(1,1)+"");
            write("updateRateEventRate", t_update_rates.getValueAt(2, 1)+"");
            try{
                int num0 = Integer.parseInt(tf_initNumEvents.getText());
                write("initialNumberEvents", num0+"");
            } catch(Exception e) {
                //TODO Add some alert here
            }
            
            // </editor-fold>

            // </editor-fold> 
            // <editor-fold defaultstate="collapsed" desc=" Section 6.3: Speciation/Extinction Model ">
            if(model.getModelType() == ModelType.ESModel){
                // <editor-fold defaultstate="collapsed" desc=" Section 6.3.1: General ">
                write("useGlobalSamplingProbability", (cb_global_prob.isSelected() ? "1" : "0"));
                write("globalSamplingProbability", tf_sampling_fraction.getText().toString());
                write("sampleProbsFilename", tf_sample_prob_file.getText().toString());
                // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.3.2: Priors ">
                write("lambdaInitPrior", t_priors.getValueAt(0, 1) + "");
                write("lambdaInitRootPrior", t_priors.getValueAt(4, 1) + "");
                write("lambdaShiftPrior", t_priors.getValueAt(1, 1) + "");
                write("lambdaShiftRootPrior", t_priors.getValueAt(5, 1) + "");
                write("muInitPrior", t_priors.getValueAt(2, 1) + "");
                write("muInitRootPrior", t_priors.getValueAt(6, 1) + "");
                write("muShiftPrior", t_priors.getValueAt(3, 1)+"");
                write("muShiftRootPrior", t_priors.getValueAt(7, 1)+"");
                //TODO
                try{
                    double segLength = Double.parseDouble(tf_segLength.getText());
                    write("initialNumberEvents", segLength+"");
                } catch(Exception e) {
                    //TODO Add alert here
                }
                // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.3.3: MCMC Simulation ">
                write("updateLambdaInitScale", t_tuning.getValueAt(0, 1)+"");
                write("updateLambdaShiftScale", t_tuning.getValueAt(1, 1)+"");
                write("updateMuInitScale", t_tuning.getValueAt(2, 1)+"");
                write("updateMuShiftScale", t_tuning.getValueAt(3, 1)+"");
                try {
                    int minCladeSize = Integer.parseInt(tf_minCladeSize.getText());
                    write("minCladeSizeForShift", minCladeSize+"");
                } catch(Exception e) {
                    //TODO Add alert here
                }
                
                // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.3.4: Starting Parameters ">
                write("lambdaInit0", t_starting_values.getValueAt(0, 1)+"");
                write("lambdaShift0", t_starting_values.getValueAt(1, 1)+"");
                write("muInit0", t_starting_values.getValueAt(2, 1)+"");
                //TODO CWC What about muShift0?
                write("muShift0", t_starting_values.getValueAt(3, 1)+"");
                // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.3.5: Parameter Update Rates ">
                //Model-Specific Update Rates
                write("updateRateLambda0", t_model_update_rates.getValueAt(0, 1)+"");
                write("updateRateLambdaShift", t_model_update_rates.getValueAt(1, 1)+"");
                write("updateRateMu0", t_model_update_rates.getValueAt(2, 1)+"");
                //TODO CWC about updateRateMuShift
                write("updateRateMuShift", t_model_update_rates.getValueAt(3, 1)+"");
                // </editor-fold>
            }
            // </editor-fold>
            // <editor-fold defaultstate="collapsed" desc=" Section 6.4: Phenotypic Evolution Model ">
            if(model.getModelType() == ModelType.Phenotypic) {
                // <editor-fold defaultstate="collapsed" desc=" Section 6.4.1: General ">
                //TODO CWC that this is correct                
                write("traitfile ", tf_filename.getText().toString());
                
                // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.4.2: MCMC Tuning ">
                //TODO
                write("updateBetaScale ", "");
                //TODO
                write("updateNodeStateScale ", "");
                //TODO
                write("updateBetaShiftScale ", "");
                // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.4.3: Starting Parameters ">
                write("betaInit ", t_starting_values.getValueAt(0, 1)+"");
                write("betaShiftInit ", t_starting_values.getValueAt(1, 1)+"");
                // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.4.4: Priors ">
                write("betaInitPrior ", t_priors.getValueAt(0, 1)+"");
                write("betaInitRootPrior ", t_priors.getValueAt(1, 1)+"");
                write("betaShiftPrior ", t_priors.getValueAt(2, 1)+"");
                write("betaShiftRootPrior ", t_priors.getValueAt(3, 1)+"");
                //CWC Can these just be input as cb and 2 text fields?
                write("useObservedMinMaxAsTraitPriors ", (cb_observed_min_max.isSelected() ? "1" : "0"));
                if(cb_observed_min_max.isSelected()) {
                    write("traitPriorMin ", tf_observed_min.getText().toString());
                    write("traitPriorMax ", tf_observed_max.getText().toString());
                }
                // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.4.5: Parameter Update Rates ">
                //Model-Specific Update Rates
                write("updateRateBeta0 ", t_model_update_rates.getValueAt(0, 1)+"");
                write("updateRateBetaShift ", t_model_update_rates.getValueAt(1,1)+"");
                write("updateRateNodeState ", t_model_update_rates.getValueAt(2, 1)+"");
                // </editor-fold>
            }
            // </editor-fold>
            writer.close();
            if(outputFile.isFile()) {
                JOptionPane.showMessageDialog(null, "Output file created successfully at "+outputFile.getAbsolutePath(), 
                        "Successful Write", JOptionPane.PLAIN_MESSAGE);
            }
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BAMM_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BAMM_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BAMM_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BAMM_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BAMM_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_browse;
    private javax.swing.JButton b_exit;
    private javax.swing.JButton b_loadConfig;
    private javax.swing.JButton b_reset_all;
    private javax.swing.JButton b_sample_file;
    private javax.swing.JButton b_write;
    private javax.swing.JCheckBox cb_clock_seed;
    private javax.swing.JCheckBox cb_global_prob;
    private javax.swing.JCheckBox cb_init_model;
    private javax.swing.JCheckBox cb_mcmc;
    private javax.swing.JCheckBox cb_observed_min_max;
    private javax.swing.JCheckBox cb_overwrite;
    private javax.swing.JCheckBox cb_priorOnly;
    private javax.swing.JCheckBox cb_simulatePriors;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel jp_general;
    private javax.swing.JLabel l_iter;
    private javax.swing.JLabel l_max;
    private javax.swing.JLabel l_min;
    private javax.swing.JLabel l_sample_prob_file;
    private javax.swing.JLabel l_sampling_fraction;
    private javax.swing.JLabel l_seed;
    private javax.swing.JLabel l_tree;
    private javax.swing.JComboBox s_model;
    private javax.swing.JTable t_model_tuning;
    private javax.swing.JTable t_model_update_rates;
    private javax.swing.JTable t_priors;
    private javax.swing.JTable t_starting_values;
    private javax.swing.JTable t_tuning;
    private javax.swing.JTable t_update_rates;
    private javax.swing.JTextField tf_event_data;
    private javax.swing.JTextField tf_event_data_freq;
    private javax.swing.JTextField tf_evp;
    private javax.swing.JTextField tf_filename;
    private javax.swing.JTextField tf_initNumEvents;
    private javax.swing.JTextField tf_iterations;
    private javax.swing.JTextField tf_mcmc;
    private javax.swing.JTextField tf_mcmc_freq;
    private javax.swing.JTextField tf_minCladeSize;
    private javax.swing.JTextField tf_observed_max;
    private javax.swing.JTextField tf_observed_min;
    private javax.swing.JTextField tf_output;
    private javax.swing.JTextField tf_runInfo;
    private javax.swing.JTextField tf_sample_prob_file;
    private javax.swing.JTextField tf_sampling_fraction;
    private javax.swing.JTextField tf_seed;
    private javax.swing.JTextField tf_segLength;
    // End of variables declaration//GEN-END:variables
}
