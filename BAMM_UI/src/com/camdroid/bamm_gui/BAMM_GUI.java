/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.camdroid.bamm_gui;

//import com.camdroid.bamm_gui.Model;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Calendar;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author cam
 */
public class BAMM_GUI extends javax.swing.JFrame {
    
    
    Model model;
    final String FILENAME = "output.txt";
    /**
     * Creates new form BAMM_GUI
     */
    public BAMM_GUI() {
        model = new Model();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jp_general = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tf_filename = new javax.swing.JTextField();
        b_browse = new javax.swing.JButton();
        cb_clock_seed = new javax.swing.JCheckBox();
        l_seed = new javax.swing.JLabel();
        tf_seed = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        cb_mcmc = new javax.swing.JCheckBox();
        l_iter = new javax.swing.JLabel();
        tf_iterations = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        s_model = new javax.swing.JComboBox();
        cb_init_model = new javax.swing.JCheckBox();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        cb_global_prob = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        tf_sampling_fraction = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tf_sample_prob_file = new javax.swing.JTextField();
        b_sample_file = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        t_starting_values = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        t_priors = new javax.swing.JTable();
        tf_evp = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        t_model_update_rates = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        t_update_rates = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        tf_runInfo = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        tf_mcmc = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        tf_mcmc_freq = new javax.swing.JTextField();
        tf_event_data_freq = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        tf_event_data = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        cb_overwrite = new javax.swing.JCheckBox();
        jLabel17 = new javax.swing.JLabel();
        tf_output = new javax.swing.JTextField();
        b_write = new javax.swing.JButton();
        b_exit = new javax.swing.JButton();
        b_loadConfig = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Tree: ");

        tf_filename.setText("whaletree.tre");
        tf_filename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_filenameActionPerformed(evt);
            }
        });

        b_browse.setText("Browse...");
        b_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_browseActionPerformed(evt);
            }
        });

        cb_clock_seed.setText("Use system clock as random seed");
        cb_clock_seed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_clock_seedActionPerformed(evt);
            }
        });

        l_seed.setText("Seed: ");

        tf_seed.setText("1979");
        tf_seed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_seedActionPerformed(evt);
            }
        });

        cb_mcmc.setText("Run MCMC");
        cb_mcmc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_mcmcActionPerformed(evt);
            }
        });

        l_iter.setText("Number of iterations: ");

        tf_iterations.setText("2000000");
        tf_iterations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_iterationsActionPerformed(evt);
            }
        });

        jLabel4.setText("Model: ");

        s_model.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Extinction/Speciation", "Phenotypic" }));
        s_model.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                s_modelActionPerformed(evt);
            }
        });

        cb_init_model.setText("Initialize Model");

        javax.swing.GroupLayout jp_generalLayout = new javax.swing.GroupLayout(jp_general);
        jp_general.setLayout(jp_generalLayout);
        jp_generalLayout.setHorizontalGroup(
            jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_generalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2)
                    .addGroup(jp_generalLayout.createSequentialGroup()
                        .addGroup(jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jp_generalLayout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(18, 18, 18)
                                    .addComponent(tf_filename, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(28, 28, 28)
                                    .addComponent(b_browse))
                                .addGroup(jp_generalLayout.createSequentialGroup()
                                    .addComponent(cb_clock_seed)
                                    .addGap(59, 59, 59)
                                    .addComponent(l_seed)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(tf_seed)))
                            .addComponent(cb_mcmc)
                            .addGroup(jp_generalLayout.createSequentialGroup()
                                .addComponent(l_iter)
                                .addGap(18, 18, 18)
                                .addComponent(tf_iterations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jp_generalLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(s_model, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cb_init_model))
                        .addGap(0, 162, Short.MAX_VALUE))
                    .addComponent(jSeparator3))
                .addContainerGap())
        );
        jp_generalLayout.setVerticalGroup(
            jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_generalLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tf_filename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_browse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_clock_seed)
                    .addComponent(l_seed)
                    .addComponent(tf_seed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cb_mcmc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_iter)
                    .addComponent(tf_iterations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jp_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(s_model, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(cb_init_model)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("General", jp_general);

        cb_global_prob.setText("Use global sampling probability");
        cb_global_prob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_global_probActionPerformed(evt);
            }
        });

        jLabel2.setText("Sampling Fraction");

        tf_sampling_fraction.setText("jTextField1");

        jLabel5.setText("Sample Probability File: ");

        tf_sample_prob_file.setText("jTextField2");

        b_sample_file.setText("Browse...");
        b_sample_file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_sample_fileActionPerformed(evt);
            }
        });

        jLabel6.setText("Starting Parameter Values");

        t_starting_values.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"lambda init", ""},
                {"lambda shift", null},
                {"mu init", null},
                {"mu shift", null}
            },
            new String [] {
                "Parameter", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(t_starting_values);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jSeparator4)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(cb_global_prob)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(tf_sample_prob_file, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 45, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_sampling_fraction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b_sample_file))
                        .addGap(70, 70, 70))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_global_prob)
                    .addComponent(jLabel2)
                    .addComponent(tf_sampling_fraction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tf_sample_prob_file, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_sample_file))
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(101, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Model", jPanel2);

        jLabel7.setText("Event Rate Prior:");

        t_priors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"lambda init", "1.0"},
                {"lambda shift", ".05"},
                {"mu init", "1.0"},
                {"mu shift", ".05"},
                {"root lambda init", null},
                {"root lambda shift", null},
                {"root mu init", "5.0"},
                {"root mu shift", null}
            },
            new String [] {
                "Parameters", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(t_priors);

        tf_evp.setText("1.0");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7)
                        .addGap(26, 26, 26)
                        .addComponent(tf_evp, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(155, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(tf_evp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(152, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Priors", jPanel3);

        jLabel8.setText("General Tuning");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"lambda init scale", null},
                {"lambda shift scale", null},
                {"mu init scale", null},
                {"mu shift scale", null}
            },
            new String [] {
                "Property", "Value"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Event Location Scale", null},
                {"Event Rate Scale", null},
                {"Local-to-Global Move Ratio", null}
            },
            new String [] {
                "Property", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable4);

        jLabel9.setText("Model-Specific Tuning");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel8))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(50, 50, 50)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel9))))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92))
        );

        jTabbedPane1.addTab("Tuning", jPanel1);

        jLabel10.setText("General Update Rates");

        t_model_update_rates.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Lambda Init Update Rate", null},
                {"Lambda Shift Update Rate", null},
                {"Mu Init Update Rate", null},
                {"Mu Shift Update Rate", null}
            },
            new String [] {
                "Property", "Value"
            }
        ));
        jScrollPane5.setViewportView(t_model_update_rates);

        t_update_rates.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Event Number Update Rate", null},
                {"Event Location Update Rate", null},
                {"Event Rate Update Rate", null}
            },
            new String [] {
                "Property", "Value"
            }
        ));
        jScrollPane6.setViewportView(t_update_rates);

        jLabel11.setText("Model-Specific Update Rates");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addContainerGap(463, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(39, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(21, 21, 21)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 164, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(166, 166, 166))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(57, 57, 57)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(345, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 674, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 486, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Update Rates", jPanel4);

        jLabel12.setText("Run Info: ");

        tf_runInfo.setText("run_info.txt");
        tf_runInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_runInfoActionPerformed(evt);
            }
        });

        jButton2.setText("Browse...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel13.setText("MCMC: ");

        tf_mcmc.setText("jTextField4");

        jButton3.setText("Browse...");

        jLabel14.setText("Frequency: ");

        tf_mcmc_freq.setText("jTextField5");
        tf_mcmc_freq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_mcmc_freqActionPerformed(evt);
            }
        });

        tf_event_data_freq.setText("jTextField5");
        tf_event_data_freq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_event_data_freqActionPerformed(evt);
            }
        });

        jLabel15.setText("Frequency: ");

        jButton4.setText("Browse...");

        tf_event_data.setText("jTextField4");
        tf_event_data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_event_dataActionPerformed(evt);
            }
        });

        jLabel16.setText("Event Data: ");

        cb_overwrite.setText("Overwrite Existing Files");
        cb_overwrite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_overwriteActionPerformed(evt);
            }
        });

        jLabel17.setText("Screen Output Frequency: ");

        tf_output.setText("jTextField8");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel16))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(tf_event_data, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tf_event_data_freq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(tf_runInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(tf_mcmc, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tf_mcmc_freq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(cb_overwrite)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(18, 18, 18)
                        .addComponent(tf_output, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(tf_runInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(tf_mcmc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)
                    .addComponent(jLabel14)
                    .addComponent(tf_mcmc_freq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(tf_event_data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4)
                    .addComponent(jLabel15)
                    .addComponent(tf_event_data_freq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(cb_overwrite)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(tf_output, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(136, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Output", jPanel5);

        b_write.setText("Write to File...");
        b_write.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_writeActionPerformed(evt);
            }
        });

        b_exit.setText("Exit");
        b_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_exitActionPerformed(evt);
            }
        });

        b_loadConfig.setText("Load Existing Config");
        b_loadConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_loadConfigActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(b_loadConfig)
                .addGap(36, 36, 36)
                .addComponent(b_write)
                .addGap(36, 36, 36)
                .addComponent(b_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_write)
                    .addComponent(b_exit)
                    .addComponent(b_loadConfig))
                .addGap(0, 56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void b_browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_browseActionPerformed
//        JFileChooser fc = new JFileChooser();
//        int returnVal = fc.showOpenDialog(this);
//        if(returnVal == JFileChooser.APPROVE_OPTION) {
//            String filename = fc.getSelectedFile().getPath();
//            tf_filename.setText(filename);
//        }
        browse(tf_filename);
    }//GEN-LAST:event_b_browseActionPerformed

    private void browse(JTextField tf) {
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            String filename = fc.getSelectedFile().getPath();
            tf.setText(filename);
        }
    }
    
    private void b_writeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_writeActionPerformed
        
        if(s_model.getSelectedIndex() == 0) {
            model.setModelType(ModelType.ESModel);
        } else if(s_model.getSelectedIndex() == 1) {
            model.setModelType(ModelType.Phenotypic);
        } else {
            //For future reference, if you add model types, set the correct type
            // here.  For now, this line should never be reached.
            JOptionPane.showMessageDialog(this, "Wait, how did you do that?");
        }
        
        model.setTreeFile(tf_filename.getText().toString());
        if(!cb_clock_seed.isSelected()) {
            try{
                model.setSeed(Long.parseLong(tf_seed.getText().toString()));
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid expression for the clock seed");
                return;
            }
        }
        if(cb_mcmc.isSelected()) {
            try{
                long numIter = Long.parseLong(tf_iterations.getText().toString());
            } catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid expression for the number of iterations");
                return;
            }
        }
//        System.out.println(model.toString());
        printToFile(model);
    }//GEN-LAST:event_b_writeActionPerformed

    private void cb_clock_seedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_clock_seedActionPerformed
        // TODO add your handling code here:
        if(cb_clock_seed.isSelected()) {
            l_seed.setVisible(false);
            tf_seed.setVisible(false);
//            model.setSeed(Calendar.getInstance().getTimeInMillis());
        } else {
            l_seed.setVisible(true);
            tf_seed.setVisible(true);
        }
    }//GEN-LAST:event_cb_clock_seedActionPerformed

    private void b_sample_fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_sample_fileActionPerformed
        browse(tf_sample_prob_file);
    }//GEN-LAST:event_b_sample_fileActionPerformed

    private void cb_global_probActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_global_probActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_global_probActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cb_overwriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_overwriteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_overwriteActionPerformed

    private void b_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_exitActionPerformed
        int reply = JOptionPane.showConfirmDialog(null, "Are you sure?", "Exit", JOptionPane.YES_NO_OPTION);
        if(reply == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
        
        
    }//GEN-LAST:event_b_exitActionPerformed

    private void s_modelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_s_modelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_s_modelActionPerformed

    private void tf_filenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_filenameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_filenameActionPerformed

    private void cb_mcmcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_mcmcActionPerformed
        model.setRunMCMC(cb_mcmc.isSelected());
        l_iter.setVisible(!cb_mcmc.isSelected());
        tf_iterations.setVisible(!cb_mcmc.isSelected());
    }//GEN-LAST:event_cb_mcmcActionPerformed

    private void tf_seedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_seedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_seedActionPerformed

    private void tf_runInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_runInfoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_runInfoActionPerformed

    private void tf_iterationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_iterationsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_iterationsActionPerformed

    private void b_loadConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_loadConfigActionPerformed
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            String filename = fc.getSelectedFile().getPath();
            model.setLoadEventData(true);
            model.setEventDataInfile(filename);
        }
    }//GEN-LAST:event_b_loadConfigActionPerformed

    private void tf_event_dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_event_dataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_event_dataActionPerformed

    private void tf_mcmc_freqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_mcmc_freqActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_mcmc_freqActionPerformed

    private void tf_event_data_freqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_event_data_freqActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_event_data_freqActionPerformed

    private void printToFile(Model model) {
        BufferedWriter writer;
        try {
            //Open the file
            writer = new BufferedWriter(new FileWriter(new File(FILENAME)));
            
            //Start writing all the options
            // <editor-fold defaultstate="collapsed" desc=" Section 6.2: General Options and Parameters ">
                // <editor-fold defaultstate="collapsed" desc=" Section 6.2.1: General ">
            //Section 6.2.1: General
            writer.write("#This is a comment and will not be read by BAMM.");
            writer.newLine(); //Do I really have to put writer.newLine() for each line of the file?
            // Very tedious, but BufferedWriter doesn't seem to parse \n
            writer.write("modeltype = " + ((model.getModelType() == ModelType.Phenotypic) ? "trait" : "extinctionspeciation"));
            writer.newLine();
            writer.write("treefile = " + model.getTreeFilename());
            writer.newLine();
            writer.write("runInfoFilename = " + tf_runInfo.getText().toString());
            writer.newLine();
            //TODO: What does this depend on?
            writer.write("sampleFromPriorOnly = ");
            writer.newLine();
            //TODO: Again, what does this depend on?
            writer.write("autotune = ");
            writer.newLine();
            writer.write("runMCMC = " + ((model.getRunMCMC() ? "1" : "0")));
            writer.newLine();
            //TODO
            writer.write("simulatePriorShifts = ");
            writer.newLine();
            
            writer.write("loadEventData = " + model.getLoadEventData());
            writer.newLine();
            if(model.getLoadEventData()) {
                writer.write("eventDataInFile = ");
                writer.newLine();
            }
            //TODO
            writer.write("initializeModel = ");
            writer.newLine();
            
            writer.write("seed = " + (cb_clock_seed.isSelected() ? tf_seed.getText().toString() : "-1"));
            writer.newLine();
            writer.write("overwrite = " + (cb_overwrite.isSelected() ? "1" : "0"));
            writer.newLine();

// </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.2.2: Priors ">
            //Section 6.2.2: Priors
            //TODO
            writer.write("poissonRatePrior = ");
            writer.newLine();

            // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.2.3: MCMC Simulation ">
            if (model.getRunMCMC()) {
                writer.write("numberGenerations = " + tf_iterations.getText().toString());
                writer.newLine();
                writer.write("mcmcWriterFreq = " + tf_mcmc_freq.getText().toString());
                writer.newLine();
                writer.write("eventDataWriteFreq = " + tf_event_data_freq.getText().toString());
                writer.newLine();
                writer.write("printFreq = " + tf_output.getText().toString());
                writer.newLine();
                //TODO
                writer.write("outName = ");
                writer.newLine();
                
                writer.write("mcmcOutfile = " + tf_mcmc.getText().toString());
                writer.newLine();
                writer.write("eventDataOutfile = " + tf_event_data.getText().toString());
                writer.newLine();
                //TODO
                writer.write("updateEventLocationScale = ");
                writer.newLine();
                //TODO
                writer.write("updateEventRateScale = ");
                writer.newLine();
                //TODO
                writer.write("localGlobalMoveRatio = ");
                writer.newLine();
            }
            // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.2.4: Parameter Update Rates ">
            
            writer.write("updateRateEventNumber = " + t_update_rates.getValueAt(0, 1));
            System.out.println("updateRateEventNumber = " + t_update_rates.getValueAt(0,1));
            writer.newLine();
            writer.write("updateRateEventPosition = " + t_update_rates.getValueAt(1,1));
            writer.newLine();
            writer.write("updateRateEventRate = " + t_update_rates.getValueAt(2, 1));
            writer.newLine();
            //TODO
            writer.write("initialNumberEvents = ");
            writer.newLine();
            // </editor-fold>

            // </editor-fold> 
            // <editor-fold defaultstate="collapsed" desc=" Section 6.3: Speciation/Extinction Model ">
            if(model.getModelType() == ModelType.ESModel){
                // <editor-fold defaultstate="collapsed" desc=" Section 6.3.1: General ">
                writer.write("useGlobalSamplingProbability = ");
                writer.write((cb_global_prob.isSelected() ? "1" : "0"));
                writer.newLine();
                writer.write("globalSamplingProbability = " + tf_sampling_fraction.getText().toString());
                writer.newLine();
                writer.write("sampleProbsFilename = " + tf_sample_prob_file.getText().toString());
                writer.newLine();
                // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.3.2: Priors ">
                writer.write("lambdaInitPrior = " + t_priors.getValueAt(0, 1));
                writer.newLine();
                writer.write("lambdaInitRootPrior = " + t_priors.getValueAt(4, 1));
                writer.newLine();
                writer.write("lambdaShiftPrior = " + t_priors.getValueAt(1, 1));
                writer.newLine();
                writer.write("lambdaShiftRootPrior = " + t_priors.getValueAt(5, 1));
                writer.newLine();
                writer.write("muInitPrior = " + t_priors.getValueAt(2, 1));
                writer.newLine();
                writer.write("muInitRootPrior = " + t_priors.getValueAt(6, 1));
                writer.newLine();
                //TODO
                writer.write("segLength = ");
                writer.newLine();
                // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.3.3: MCMC Simulation ">
                //TODO
                writer.write("updateLambdaInitScale = ");
                writer.newLine();
                //TODO
                writer.write("updateLambdaShiftScale = ");
                writer.newLine();
                //TODO
                writer.write("updateMuInitScale = ");
                writer.newLine();
                //TODO
                writer.write("minCladeSizeForShift = ");
                writer.newLine();
                // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.3.4: Starting Parameters ">
                //TODO
                writer.write("lambdaInit0 = ");
                writer.newLine();
                //TODO
                writer.write("lambdaShift0 = ");
                writer.newLine();
                //TODO
                writer.write("muInit0 = ");
                writer.newLine();
                // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.3.5: Parameter Update Rates ">
                //TODO
                writer.write("updateRateLambda0 = ");
                writer.newLine();
                //TODO
                writer.write("updateRateLambdaShift = ");
                writer.newLine();
                //TODO
                writer.write("updateRateMu0 = ");
                writer.newLine();
                // </editor-fold>
            }
            // </editor-fold>
            // <editor-fold defaultstate="collapsed" desc=" Section 6.4: Phenotypic Evolution Model ">
            if(model.getModelType() == ModelType.Phenotypic) {
                // <editor-fold defaultstate="collapsed" desc=" Section 6.4.1: General ">
                //TODO
                writer.write("traitfile = ");
                writer.newLine();
                
                // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.4.2: MCMC Tuning ">
                //TODO
                writer.write("updateBetaScale = ");
                writer.newLine();
                //TODO
                writer.write("updateNodeStateScale = ");
                writer.newLine();
                //TODO
                writer.write("updateBetaShiftScale = ");
                writer.newLine();
                // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.4.3: Starting Parameters ">
                //TODO
                writer.write("betaInit = ");
                writer.newLine();
                //TODO
                writer.write("betaShiftInit = ");
                writer.newLine();
                // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.4.4: Priors ">
                //TODO
                writer.write("betaInitPrior = ");
                writer.newLine();
                //TODO
                writer.write("betaInitRootPrior = ");
                writer.newLine();
                //TODO
                writer.write("betaShiftPrior = ");
                writer.newLine();
                //TODO
                writer.write("betaShiftRootPrior = ");
                writer.newLine();
                //TODO
                writer.write("useObservedMinMaxAsTraitPriors = ");
                writer.newLine();
                //TODO
                writer.write("traitPriorMin = ");
                writer.newLine();
                //TODO
                writer.write("traitPriorMax = ");
                writer.newLine();
                // </editor-fold>
                // <editor-fold defaultstate="collapsed" desc=" Section 6.4.5: Parameter Update Rates ">
                //TODO
                writer.write("updateRateBeta0 = ");
                writer.newLine();
                //TODO
                writer.write("updateRateBetaShift = ");
                writer.newLine();
                //TODO
                writer.write("updateRateNodeState = ");
                writer.newLine();
                // </editor-fold>
            }
            // </editor-fold>
            writer.close();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BAMM_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BAMM_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BAMM_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BAMM_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BAMM_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_browse;
    private javax.swing.JButton b_exit;
    private javax.swing.JButton b_loadConfig;
    private javax.swing.JButton b_sample_file;
    private javax.swing.JButton b_write;
    private javax.swing.JCheckBox cb_clock_seed;
    private javax.swing.JCheckBox cb_global_prob;
    private javax.swing.JCheckBox cb_init_model;
    private javax.swing.JCheckBox cb_mcmc;
    private javax.swing.JCheckBox cb_overwrite;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable4;
    private javax.swing.JPanel jp_general;
    private javax.swing.JLabel l_iter;
    private javax.swing.JLabel l_seed;
    private javax.swing.JComboBox s_model;
    private javax.swing.JTable t_model_update_rates;
    private javax.swing.JTable t_priors;
    private javax.swing.JTable t_starting_values;
    private javax.swing.JTable t_update_rates;
    private javax.swing.JTextField tf_event_data;
    private javax.swing.JTextField tf_event_data_freq;
    private javax.swing.JTextField tf_evp;
    private javax.swing.JTextField tf_filename;
    private javax.swing.JTextField tf_iterations;
    private javax.swing.JTextField tf_mcmc;
    private javax.swing.JTextField tf_mcmc_freq;
    private javax.swing.JTextField tf_output;
    private javax.swing.JTextField tf_runInfo;
    private javax.swing.JTextField tf_sample_prob_file;
    private javax.swing.JTextField tf_sampling_fraction;
    private javax.swing.JTextField tf_seed;
    // End of variables declaration//GEN-END:variables
}
